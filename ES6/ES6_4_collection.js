// Коллекцией является любой объект, который храниит множество элементов, как
// единое целоею. Спецификация ES6 вводит новые объекты коллекций для обеспечения
// более эффективных способов хранения и организации данных
//  в es5 - Единственные коллекции являются массивы, в  ES6 добавились еще
/**
 * Буферные массивы
 * типихированные массивы
 * Объекты set и map
 */
{
  // Буферные массивы
  /*
    в простом массиве элементами массива могут быть любые типы данных,
    масиив может диенамически расширятся. Что сказывается на производительности
    потребляется много памяти

    С буферными массивами дело меняется, Буферные массивы это коллекция 8 битовых блоков памяти
    Каждый блок является элементом буферного массива
    Pазмер буферного массива указывается приего создании и не может увел. динамически
    буферные массивы могут храниить только числа

    let buffer = new ArrayBuffer(80);
    можно использовать и 32 и 64 бит
  */
}
{
  // Типизирванные массивы
  /*
    типизированные массивы позволяют работать с буферными массивами как с простыми
    типизированные массив действует как обертка вокруг буферного массива
  */
}
{
  /* Объект Set */
  /*
   Объект Set являются коллекцией уникальных значений любого типа. Значения в объекте
   set хранятся в порядке их добавления.
  */
}
{
  // weakSet
}
{
  // Объекты map
  /*
    Объекты map - это коллекция пар ключ / значения. Ключи и значения в объекте
    map могут быть любого типа. Пары ключ / значение хранятся в порядке их добавления
  */
  let map = new Map();
  let o = {n: 1};
  map.set(o, "A");  //добавит пару ключ/значение
  map.set("2", 9);
  console.log(map.has("2")); // проверит наличие ключа
  console.log(map.get(o)); // вернет значение связанное с ключом
  console.log(...map);
  map.delete("2"); // удалит пару ключ/значение
  map.clear(); // удалит все
  // создать объект из итерируемого объекта
  let map_1 = new Map([[1,2], [4,5]]);
  console.log(map_1.size); // число ключей
}
{
  // weakMap
}
